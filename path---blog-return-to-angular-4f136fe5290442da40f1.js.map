{"version":3,"sources":["webpack:///path---blog-return-to-angular-4f136fe5290442da40f1.js","webpack:///./.cache/json/blog-return-to-angular.json"],"names":["webpackJsonp","600","module","exports","data","markdownRemark","html","frontmatter","date","path","title","type","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,2yJAAs/IC,aAAiVC,KAAA,iBAAAC,KAAA,2BAAAC,MAAA,oBAAAC,KAAA,UAAsGC","file":"path---blog-return-to-angular-4f136fe5290442da40f1.js","sourcesContent":["webpackJsonp([212817550995295],{\n\n/***/ 600:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>This post is more appropriate for me and not you. Unless you, like me, are learning Angular and want all the pieces to fit in your brain.</p>\\n<p>We have a file <code>app.js</code> that has a module named 'myApp' instantiated to app. A module contains the different AngularJS components.</p>\\n<pre><code class=\\\"language-javascript\\\">var app = angular.module(\\\"myApp\\\", []);\\n</code></pre>\\n<p>In our <code>index.html</code> we connect our HTML to our Angular via a directive. Directives are instructions back to Angular to run some code. They are namespaced with 'ng-' and are the equivalent of <code>&#x3C;% %></code> in ERB, sort of. Directives also define the scope - so for our main directive, we want our whole code to be scoped to the whole body text of the HTML.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;body ng-app=\\\"myApp\\\">\\n  &#x3C;!--- code -->\\n&#x3C;/body>\\n</code></pre>\\n<p>Now we create a file called <code>MainController.js</code> for managing our app's data. In the controller, we are naming our controller as our first argument and passing in an array as our second. This array[0] is set to <code>$scope</code> and [1] set to, in our case, a string. Note that we are able to link this controller to our main app in app.js because <code>controller</code> is a method of <code>app</code>, and <code>app</code> is the instantiated angular module. This is how this is all stitched together so far.</p>\\n<pre><code class=\\\"language-javascript\\\">app.controller('MainController', ['$scope', function($scope) {\\n  $scope.title = 'This is my String';\\n}]);\\n</code></pre>\\n<p>Now this <code>$scope</code> means that the entire body of the HTML page can access things like <code>title</code> using the angular version of string interpolation, which is <code>{{ site.dlcb }} title {{ site.drcb }}</code> - now 'This is my String' can be entered into the HTML.</p>\\n<p>You can also set scoped objects and use dot notation to refer to data in your html.</p>\\n<pre><code class=\\\"language-javascript\\\">app.controller('MainController', ['$scope', function($scope) {\\n  $scope.title = 'This is my String Harriet Tubman';\\n  $scope.promo = \\\"Goodbye Andrew Indian Killer Jackson\\\";\\n  $scope.product = {\\n  name: 'The Book of Tubman',\\n  price: 119\\n}\\n</code></pre>\\n<p>and the html</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;div class=\\\"thumbnail\\\">\\n  &#x3C;img src=\\\"img/the-book-of-trees.jpg\\\">\\n  &#x3C;p class=\\\"title\\\">{{ site.dlcb }} product.name {{ site.drcb }}&#x3C;/p>\\n  &#x3C;p class=\\\"price\\\">$ {{ site.dlcb }} product.price {{ site.drcb }}&#x3C;/p>\\n  &#x3C;p class=\\\"date\\\"> &#x3C;/p>\\n&#x3C;/div>\\n</code></pre>\\n<p>Astute readers will note that above in the \\\"price\\\" class p tag, I hardcoded a dollar - that isnt necessary though with Angular, you can use a pipe like with bash and just send that data to a filter. Here we will use 'currency' and delete the dollar sign.</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;p class=\\\"price\\\">{{ site.dlcb }} product.price | currency {{ site.drcb }}&#x3C;/p>\\n</code></pre>\\n<p>We want to use filters so we are separating the data from the presentation.</p>\\n<p>Other cool filters include:</p>\\n<ul>\\n<li><code>| uppercase</code></li>\\n<li><code>| date</code></li>\\n</ul>\\n<p>Also note that this is how you add a date into Angular and also create an array of objects in Angular to reference later.</p>\\n<pre><code class=\\\"language-javascript\\\">$scope.products =\\n  [\\n    {\\n      name: 'The Book of Trees',\\n      price: 19,\\n      pubdate: new Date('2014', '03', '08'),\\n      cover: 'img/the-book-of-trees.jpg'\\n    },\\n    {\\n      name: 'Program or be Programmed',\\n      price: 8,\\n      pubdate: new Date('2013', '08', '01'),\\n      cover: 'img/program-or-be-programmed.jpg'\\n    }\\n  ]\\n}]);\\n</code></pre>\\n<p>Now we can display this with a loop in the html with the code below. Note that we use <code>ng-src</code> instead of plain old <code>src</code> inside the <code>img</code> tag, and how we use <code>ng-repeat</code> and the Ruby-like <code>product in products</code> syntax.</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;div ng-repeat=\\\"product in products\\\" class=\\\"col-md-6\\\">\\n  &#x3C;div class=\\\"thumbnail\\\">\\n    &#x3C;img ng-src=\\\" {{ site.dlcb }} product.cover {{ site.drcb }} \\\" />\\n    &#x3C;p class=\\\"title\\\">{{ site.dlcb }} product.name{{ site.drcb }}&#x3C;/p>\\n    &#x3C;p class=\\\"price\\\">{{ site.dlcb }}product.price | currency{{ site.drcb }}&#x3C;/p>\\n    &#x3C;p class=\\\"date\\\">{{ site.dlcb }}product.pubdate | date {{ site.drcb }}&#x3C;/p>\\n  &#x3C;/div>\\n&#x3C;/div>\\n</code></pre>\\n<h4>Overview</h4>\\n<p>What I learned about Angular today</p>\\n<ul>\\n<li>A module contains the different components of an AngularJS app</li>\\n<li>A controller manages the app's data</li>\\n<li>An expression displays values on the page</li>\\n<li>A filter formats the value of an expression</li>\\n</ul>\",\"frontmatter\":{\"date\":\"April 20, 2016\",\"path\":\"/blog/return-to-angular/\",\"title\":\"Return to Angular\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-return-to-angular-4f136fe5290442da40f1.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>This post is more appropriate for me and not you. Unless you, like me, are learning Angular and want all the pieces to fit in your brain.</p>\\n<p>We have a file <code>app.js</code> that has a module named 'myApp' instantiated to app. A module contains the different AngularJS components.</p>\\n<pre><code class=\\\"language-javascript\\\">var app = angular.module(\\\"myApp\\\", []);\\n</code></pre>\\n<p>In our <code>index.html</code> we connect our HTML to our Angular via a directive. Directives are instructions back to Angular to run some code. They are namespaced with 'ng-' and are the equivalent of <code>&#x3C;% %></code> in ERB, sort of. Directives also define the scope - so for our main directive, we want our whole code to be scoped to the whole body text of the HTML.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;body ng-app=\\\"myApp\\\">\\n  &#x3C;!--- code -->\\n&#x3C;/body>\\n</code></pre>\\n<p>Now we create a file called <code>MainController.js</code> for managing our app's data. In the controller, we are naming our controller as our first argument and passing in an array as our second. This array[0] is set to <code>$scope</code> and [1] set to, in our case, a string. Note that we are able to link this controller to our main app in app.js because <code>controller</code> is a method of <code>app</code>, and <code>app</code> is the instantiated angular module. This is how this is all stitched together so far.</p>\\n<pre><code class=\\\"language-javascript\\\">app.controller('MainController', ['$scope', function($scope) {\\n  $scope.title = 'This is my String';\\n}]);\\n</code></pre>\\n<p>Now this <code>$scope</code> means that the entire body of the HTML page can access things like <code>title</code> using the angular version of string interpolation, which is <code>{{ site.dlcb }} title {{ site.drcb }}</code> - now 'This is my String' can be entered into the HTML.</p>\\n<p>You can also set scoped objects and use dot notation to refer to data in your html.</p>\\n<pre><code class=\\\"language-javascript\\\">app.controller('MainController', ['$scope', function($scope) {\\n  $scope.title = 'This is my String Harriet Tubman';\\n  $scope.promo = \\\"Goodbye Andrew Indian Killer Jackson\\\";\\n  $scope.product = {\\n  name: 'The Book of Tubman',\\n  price: 119\\n}\\n</code></pre>\\n<p>and the html</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;div class=\\\"thumbnail\\\">\\n  &#x3C;img src=\\\"img/the-book-of-trees.jpg\\\">\\n  &#x3C;p class=\\\"title\\\">{{ site.dlcb }} product.name {{ site.drcb }}&#x3C;/p>\\n  &#x3C;p class=\\\"price\\\">$ {{ site.dlcb }} product.price {{ site.drcb }}&#x3C;/p>\\n  &#x3C;p class=\\\"date\\\"> &#x3C;/p>\\n&#x3C;/div>\\n</code></pre>\\n<p>Astute readers will note that above in the \\\"price\\\" class p tag, I hardcoded a dollar - that isnt necessary though with Angular, you can use a pipe like with bash and just send that data to a filter. Here we will use 'currency' and delete the dollar sign.</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;p class=\\\"price\\\">{{ site.dlcb }} product.price | currency {{ site.drcb }}&#x3C;/p>\\n</code></pre>\\n<p>We want to use filters so we are separating the data from the presentation.</p>\\n<p>Other cool filters include:</p>\\n<ul>\\n<li><code>| uppercase</code></li>\\n<li><code>| date</code></li>\\n</ul>\\n<p>Also note that this is how you add a date into Angular and also create an array of objects in Angular to reference later.</p>\\n<pre><code class=\\\"language-javascript\\\">$scope.products =\\n  [\\n    {\\n      name: 'The Book of Trees',\\n      price: 19,\\n      pubdate: new Date('2014', '03', '08'),\\n      cover: 'img/the-book-of-trees.jpg'\\n    },\\n    {\\n      name: 'Program or be Programmed',\\n      price: 8,\\n      pubdate: new Date('2013', '08', '01'),\\n      cover: 'img/program-or-be-programmed.jpg'\\n    }\\n  ]\\n}]);\\n</code></pre>\\n<p>Now we can display this with a loop in the html with the code below. Note that we use <code>ng-src</code> instead of plain old <code>src</code> inside the <code>img</code> tag, and how we use <code>ng-repeat</code> and the Ruby-like <code>product in products</code> syntax.</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;div ng-repeat=\\\"product in products\\\" class=\\\"col-md-6\\\">\\n  &#x3C;div class=\\\"thumbnail\\\">\\n    &#x3C;img ng-src=\\\" {{ site.dlcb }} product.cover {{ site.drcb }} \\\" />\\n    &#x3C;p class=\\\"title\\\">{{ site.dlcb }} product.name{{ site.drcb }}&#x3C;/p>\\n    &#x3C;p class=\\\"price\\\">{{ site.dlcb }}product.price | currency{{ site.drcb }}&#x3C;/p>\\n    &#x3C;p class=\\\"date\\\">{{ site.dlcb }}product.pubdate | date {{ site.drcb }}&#x3C;/p>\\n  &#x3C;/div>\\n&#x3C;/div>\\n</code></pre>\\n<h4>Overview</h4>\\n<p>What I learned about Angular today</p>\\n<ul>\\n<li>A module contains the different components of an AngularJS app</li>\\n<li>A controller manages the app's data</li>\\n<li>An expression displays values on the page</li>\\n<li>A filter formats the value of an expression</li>\\n</ul>\",\"frontmatter\":{\"date\":\"April 20, 2016\",\"path\":\"/blog/return-to-angular/\",\"title\":\"Return to Angular\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-return-to-angular.json\n// module id = 600\n// module chunks = 212817550995295"],"sourceRoot":""}