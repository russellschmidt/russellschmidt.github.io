{"version":3,"sources":["webpack:///path---blog-heap-delete-20f661a33883fa396ab5.js","webpack:///./.cache/json/blog-heap-delete.json"],"names":["webpackJsonp","571","module","exports","data","markdownRemark","html","frontmatter","date","path","title","type","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+mCAAAC,aAAwoCC,KAAA,kBAAAC,KAAA,qBAAAC,MAAA,cAAAC,KAAA,UAA2FC","file":"path---blog-heap-delete-20f661a33883fa396ab5.js","sourcesContent":["webpackJsonp([277014189579803],{\n\n/***/ 571:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Deleting a node in a min-heap</h2>\\n<p>One of the assignments for Bloc's SET program involves creating CRUD methods in Ruby to build a heap and tear it down again. I am using a min-heap for reference.</p>\\n<p>There are a ton of online references with illustrations on how to delete a node in a heap. In essence, the credited response is that you swap out the right-most node on the bottom row with the now-empty target. Then you proceed to swap either up or down to re-heap / heapify / whathaveyou so that each row's items, in the case of a min-heap, is smaller than any given item in the row that follows.</p>\\n<p>Note that the measure of what constitutes smaller is itself a little confusing but no matter.</p>\\n<p><a href=\\\"http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html\\\">Emory U's Heap Delete logorithm page</a>\\n<a href=\\\"https://webdocs.cs.ualberta.ca/~holte/T26/heap-del.html\\\">U. of Alberta's Heap Delete Page</a>\\n<a href=\\\"http://www.math.clemson.edu/~warner/M865/HeapDelete.html\\\">Clemson's Heap Delete Page</a>\\n<a href=\\\"https://youtu.be/ijfPvX2qYOQ\\\">Some dude on YouTube</a></p>\",\"frontmatter\":{\"date\":\"August 25, 2016\",\"path\":\"/blog/heap-delete/\",\"title\":\"Heap Delete\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-heap-delete-20f661a33883fa396ab5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Deleting a node in a min-heap</h2>\\n<p>One of the assignments for Bloc's SET program involves creating CRUD methods in Ruby to build a heap and tear it down again. I am using a min-heap for reference.</p>\\n<p>There are a ton of online references with illustrations on how to delete a node in a heap. In essence, the credited response is that you swap out the right-most node on the bottom row with the now-empty target. Then you proceed to swap either up or down to re-heap / heapify / whathaveyou so that each row's items, in the case of a min-heap, is smaller than any given item in the row that follows.</p>\\n<p>Note that the measure of what constitutes smaller is itself a little confusing but no matter.</p>\\n<p><a href=\\\"http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/9-BinTree/heap-delete.html\\\">Emory U's Heap Delete logorithm page</a>\\n<a href=\\\"https://webdocs.cs.ualberta.ca/~holte/T26/heap-del.html\\\">U. of Alberta's Heap Delete Page</a>\\n<a href=\\\"http://www.math.clemson.edu/~warner/M865/HeapDelete.html\\\">Clemson's Heap Delete Page</a>\\n<a href=\\\"https://youtu.be/ijfPvX2qYOQ\\\">Some dude on YouTube</a></p>\",\"frontmatter\":{\"date\":\"August 25, 2016\",\"path\":\"/blog/heap-delete/\",\"title\":\"Heap Delete\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-heap-delete.json\n// module id = 571\n// module chunks = 277014189579803"],"sourceRoot":""}