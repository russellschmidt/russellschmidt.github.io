webpackJsonp([0x87c731608a74],{539:function(e,t){e.exports={data:{markdownRemark:{html:'<h3>Some thoughts on Angular Style Guides.</h3>\n<p>I read one from one of my new favorite software bloggers, Todd Motto! <a href="https://toddmotto.com/opinionated-angular-js-styleguide-for-teams/">toddmotto.com</a> .</p>\n<p>Also I read this much esteemed gentleman John Papa\'s <a href="https://github.com/johnpapa/angular-styleguide">Angular Style Guide</a>.</p>\n<p>Lastly, we cannot ignore the mad scientists at Google that created Angular and their OG <a href="https://google.github.io/styleguide/angularjs-google-style.html">style guide</a>.</p>\n<h3>Start at the Start</h3>\n<p>From the Google styleguide, the suggestions are (not at all comprehensively listed) as follows:</p>\n<ol>\n<li>Main application module should be in root</li>\n<li>Only alter modules where they are defined</li>\n<li>Keep modules consistent (in case you reuse it elsewhere) so define them in the same file as their component pieces so they can travel as a discrete, autonomous (dependency-free) unit</li>\n<li>Methods should be defined in controllers.</li>\n<li>In the Template, reference the controller with the <code>as controllerName</code> convention clears up confusion when using multiple controllers in a template.</li>\n<li>Don\'t name your variables with a leading \'$\'</li>\n</ol>\n<h3>Call Me Big Papa</h3>\n<p>For extra credit check out his <a href="https://www.pluralsight.com/courses/angularjs-patterns-clean-code">course on Angular JS patterns</a>.</p>\n<p>Before hopping into another incomplete but somewhat accurate list, I just want future biographers to note that I really enjoyed reading the Angular 2 guide. It has a lot of good, practical advice for writing code in general.</p>\n<ol>\n<li>Define 1 component per file, ideally &#x3C; 400 lines of code</li>\n<li>Keep functions small, idealling &#x3C; 75 lines of code</li>\n<li>Avoid naming collisions with unique names and descriptive folder names</li>\n<li>Use a consistent sequencing of components - properties, public functions, private functions. Each is alphabetized by name within its group.</li>\n<li>Put logic in services and not a component</li>\n<li>Use factories to make reusable components that are put into views</li>\n<li>Services should have a single responsibility.</li>\n<li>Names should follow a pattern that describes the feature then the type - so, <code>feature.type.js</code></li>\n<li>Dashes should separate words and dots separate the name from the type</li>\n<li>Add suffix of spec to a test that matches the thing it is testing - so, <code>feature.type.spec.js</code></li>\n<li>Components should have the name <code>Component</code> attached to the suffix - ex. <code>class SpeakerListComponent()</code></li>\n<li>Services ought to use CamelCase and end in Service  -ex. <code>SpeakerListService</code>.</li>\n<li>\n<p>LIFT Principle should guide you - as if you can do the following:</p>\n<ol>\n<li>Be able to <strong>Locate</strong> your code quickly</li>\n<li><strong>Identify</strong> your code at a glance</li>\n<li>Keep the <strong>Flattest</strong> structure possible</li>\n<li><strong>Try</strong> to stay DRY</li>\n</ol>\n</li>\n<li>Keep 3rd party code in a folder in root separate from code you write</li>\n<li>If a folder has more than 7 files, consider making a new folder or subfolder</li>\n<li>Keep route configuration in a separate file</li>\n</ol>\n<h3>Thats the Motto Yolo</h3>\n<p>Todd Motto has a great style guide as well with some very helpful code samples. I like his writing style, also, which is  more rare than the meat of fresh roadkill. One might say his direct, clear style is the opposite of my meandering, dad-joke-full style of overlong sentences peppered with non sequitors.</p>\n<p>There is overlap here with Mr. Papa, but nevertheless some of the style concepts include:</p>\n<ol>\n<li>Use the getter syntax for declaring modules</li>\n<li>Wrap your module functions in an IIFE - Immediately Invoked Function Expression</li>\n<li>Be sure to use the ControllerAs syntax with controllers</li>\n<li>Avoid logic in Controllers - push to services and/or factories.</li>\n<li>DOM manipulation should only occur inside a directive.</li>\n<li>Factory-made Objects should have the same name as the Factory</li>\n<li>Services should be class-like, utilizing the <code>this</code> keyword.</li>\n<li>Do not name services with the <code>ng-</code> prefix</li>\n<li>Directives must be camelCased</li>\n<li>One role, one file. Keep everything encapsulated and bite-sized.</li>\n<li>Dont use $ or $$ to start a variable or other custom name</li>\n</ol>\n<h4>Wrapping up</h4>\n<p>I am just beginning my Angular journey and these posts are far more for me than for you. I think the newest thing to get used to is the getter syntax and being more strict about keeping functions short and making more files. For whatever reason I thought there was a performance price to be paid there but none of these far, far more accomplished and knowledgeable people seem to give a care.</p>',frontmatter:{date:"March 30, 2016",path:"/blog/angular-style-guides/",title:"Angular Style Guides",type:"blog"}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-angular-style-guides-bebf5863553a4ae8fc78.js.map