{"version":3,"sources":["webpack:///path---blog-react-at-home-8ab3ba19b50d6d9cd7f5.js","webpack:///./.cache/json/blog-react-at-home.json"],"names":["webpackJsonp","596","module","exports","data","markdownRemark","html","frontmatter","date","path","title","type","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,29HAA42HC,aAA4KC,KAAA,eAAAC,KAAA,uBAAAC,MAAA,gBAAAC,KAAA,UAA4FC","file":"path---blog-react-at-home-8ab3ba19b50d6d9cd7f5.js","sourcesContent":["webpackJsonp([274846515073976],{\n\n/***/ 596:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>This is a tutorial on installing React in a dev environment on my home machine. I really want to get to a point where I am installing this on Virtual Box running a Linux variant but I don't have that kind of time today. I stole all of the code and the idea and explanations from <a href=\\\"https://www.youtube.com/watch?v=0BHoz0ptv7k\\\">Mastering React - React Fundamentals: Environment Setup</a> so visit him and like his video.</p>\\n<h3>terminal</h3>\\n<p>Go to terminal and get ready to rock out with NPM. Navigate into the folder you want your project to live in with <code>cd foldername</code> and then get ready.</p>\\n<pre><code class=\\\"language-bash\\\">$ npm init\\n</code></pre>\\n<p>Hit return to race through all the project name fields (or enter them as it is not relevant to this tutorial working) and type 'yes' at the end.</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install react react-dom --save\\n\\n$ npm install babel webpack webpack-dev-server -g\\n\\n$ npm install babel-loader babel-core babel-preset-es2015 babel-preset-react\\n\\n$ touch index.html App.js main.js webpack.config.js\\n</code></pre>\\n<p>Note the -g flag for global install so you only have to install babel and webpack once.</p>\\n<p>Now open the folder in your IDE of choice.</p>\\n<h3>codey code code</h3>\\n<p>in the file <code>webpack.config.js</code> (that compiles the JS and launch our development server)</p>\\n<pre><code class=\\\"language-javascript\\\">module.exports = {\\n  entry: './main.js',\\n  output: {\\n    path: './',\\n    filename: 'index.js'\\n  },\\n  devServer: {\\n    inline: true,\\n    port: 3333\\n  },\\n  module: {\\n    loaders: [\\n      {\\n        test: /\\\\.js$/,\\n        exclude: /node_modules/,\\n        loader: 'babel',\\n        query: {\\n          presets: ['es2015', 'react']\\n        }\\n      }\\n    ]\\n  }\\n}\\n</code></pre>\\n<p>Now we save and open <code>index.html</code> to put in our site skeleton and our React entry point.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;!DOCTYPE html>\\n&#x3C;html lang=\\\"en\\\">\\n&#x3C;head>\\n  &#x3C;meta charset=\\\"utf-8\\\" />\\n  &#x3C;title>React App&#x3C;/title>\\n  &#x3C;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n&#x3C;/head>\\n&#x3C;body>\\n  &#x3C;div id=\\\"app\\\">&#x3C;/div>\\n\\n  &#x3C;script src=\\\"index.js\\\">&#x3C;/script>\\n&#x3C;/body>\\n\\n&#x3C;/html>\\n</code></pre>\\n<p>Hit save, and now we open <code>App.js</code> to make some components.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nclass App extends React.Component {\\n  render(){\\n    return &#x3C;div>Hello, World&#x3C;/div>\\n  }\\n}\\n\\nexport default App\\n</code></pre>\\n<p>Save this, and onto <code>main.js</code> for some connective tissue between our components and the HTML.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nReactDOM.render(&#x3C;App />, document.getElementById('app'))\\n</code></pre>\\n<p>Save again, and pop on into <code>package.json</code> swap out the 'test' key-value pair in 'scripts' to the following:</p>\\n<pre><code class=\\\"language-json\\\">{\\n  \\\"name\\\": \\\"react\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"webpack-dev-server\\\"\\n  },\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"^15.1.0\\\",\\n    \\\"react-dom\\\": \\\"^15.1.0\\\"\\n  }\\n}\\n</code></pre>\\n<h3>Back to the Terminal</h3>\\n<p>We are ready to fire it up!</p>\\n<pre><code class=\\\"language-bash\\\">$ npm start\\n</code></pre>\\n<p>If you recall we used 3333 as our port in the <code>webpack.config.js</code> and here it is, fired up. On the same machine, go to localhost:3333 and you should see 'Hello, World' which is the message in your <code>App.js</code> file. In fact, what is cool about the ol React setup here is that if you go to your App.js file and change the words in the <code>&#x3C;div></code> and hit save, the site updates automatically without needing a refresh.</p>\\n<p>When you are sick of your project, Control-C will exit NPM.</p>\",\"frontmatter\":{\"date\":\"May 26, 2016\",\"path\":\"/blog/react-at-home/\",\"title\":\"React At Home\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-react-at-home-8ab3ba19b50d6d9cd7f5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>This is a tutorial on installing React in a dev environment on my home machine. I really want to get to a point where I am installing this on Virtual Box running a Linux variant but I don't have that kind of time today. I stole all of the code and the idea and explanations from <a href=\\\"https://www.youtube.com/watch?v=0BHoz0ptv7k\\\">Mastering React - React Fundamentals: Environment Setup</a> so visit him and like his video.</p>\\n<h3>terminal</h3>\\n<p>Go to terminal and get ready to rock out with NPM. Navigate into the folder you want your project to live in with <code>cd foldername</code> and then get ready.</p>\\n<pre><code class=\\\"language-bash\\\">$ npm init\\n</code></pre>\\n<p>Hit return to race through all the project name fields (or enter them as it is not relevant to this tutorial working) and type 'yes' at the end.</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install react react-dom --save\\n\\n$ npm install babel webpack webpack-dev-server -g\\n\\n$ npm install babel-loader babel-core babel-preset-es2015 babel-preset-react\\n\\n$ touch index.html App.js main.js webpack.config.js\\n</code></pre>\\n<p>Note the -g flag for global install so you only have to install babel and webpack once.</p>\\n<p>Now open the folder in your IDE of choice.</p>\\n<h3>codey code code</h3>\\n<p>in the file <code>webpack.config.js</code> (that compiles the JS and launch our development server)</p>\\n<pre><code class=\\\"language-javascript\\\">module.exports = {\\n  entry: './main.js',\\n  output: {\\n    path: './',\\n    filename: 'index.js'\\n  },\\n  devServer: {\\n    inline: true,\\n    port: 3333\\n  },\\n  module: {\\n    loaders: [\\n      {\\n        test: /\\\\.js$/,\\n        exclude: /node_modules/,\\n        loader: 'babel',\\n        query: {\\n          presets: ['es2015', 'react']\\n        }\\n      }\\n    ]\\n  }\\n}\\n</code></pre>\\n<p>Now we save and open <code>index.html</code> to put in our site skeleton and our React entry point.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;!DOCTYPE html>\\n&#x3C;html lang=\\\"en\\\">\\n&#x3C;head>\\n  &#x3C;meta charset=\\\"utf-8\\\" />\\n  &#x3C;title>React App&#x3C;/title>\\n  &#x3C;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n&#x3C;/head>\\n&#x3C;body>\\n  &#x3C;div id=\\\"app\\\">&#x3C;/div>\\n\\n  &#x3C;script src=\\\"index.js\\\">&#x3C;/script>\\n&#x3C;/body>\\n\\n&#x3C;/html>\\n</code></pre>\\n<p>Hit save, and now we open <code>App.js</code> to make some components.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nclass App extends React.Component {\\n  render(){\\n    return &#x3C;div>Hello, World&#x3C;/div>\\n  }\\n}\\n\\nexport default App\\n</code></pre>\\n<p>Save this, and onto <code>main.js</code> for some connective tissue between our components and the HTML.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nReactDOM.render(&#x3C;App />, document.getElementById('app'))\\n</code></pre>\\n<p>Save again, and pop on into <code>package.json</code> swap out the 'test' key-value pair in 'scripts' to the following:</p>\\n<pre><code class=\\\"language-json\\\">{\\n  \\\"name\\\": \\\"react\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"webpack-dev-server\\\"\\n  },\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"^15.1.0\\\",\\n    \\\"react-dom\\\": \\\"^15.1.0\\\"\\n  }\\n}\\n</code></pre>\\n<h3>Back to the Terminal</h3>\\n<p>We are ready to fire it up!</p>\\n<pre><code class=\\\"language-bash\\\">$ npm start\\n</code></pre>\\n<p>If you recall we used 3333 as our port in the <code>webpack.config.js</code> and here it is, fired up. On the same machine, go to localhost:3333 and you should see 'Hello, World' which is the message in your <code>App.js</code> file. In fact, what is cool about the ol React setup here is that if you go to your App.js file and change the words in the <code>&#x3C;div></code> and hit save, the site updates automatically without needing a refresh.</p>\\n<p>When you are sick of your project, Control-C will exit NPM.</p>\",\"frontmatter\":{\"date\":\"May 26, 2016\",\"path\":\"/blog/react-at-home/\",\"title\":\"React At Home\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-react-at-home.json\n// module id = 596\n// module chunks = 274846515073976"],"sourceRoot":""}