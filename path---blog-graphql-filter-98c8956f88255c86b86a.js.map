{"version":3,"sources":["webpack:///path---blog-graphql-filter-98c8956f88255c86b86a.js","webpack:///./.cache/json/blog-graphql-filter.json"],"names":["webpackJsonp","568","module","exports","data","markdownRemark","html","frontmatter","date","path","title","type","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,gvPAAgyPC,aAAgCC,KAAA,oBAAAC,KAAA,wBAAAC,MAAA,WAAAC,KAAA,UAA6FC","file":"path---blog-graphql-filter-98c8956f88255c86b86a.js","sourcesContent":["webpackJsonp([165526250525667],{\n\n/***/ 568:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>So the tutorials I used to teach myself a bit about Gatsby have assumed a single source for your blog posts and a structure that has your homepage serve as the \\\"index\\\" in RESTful terms, listing links to all of your blog posts. unfortunately, I want my site to have both portfolio and blog post links to start and I think the separation is important.</p>\\n<p>So it looks like I have to bump up my GraphQL education on the timetable.</p>\\n<p>The solution is to add in a filter to your GraphQL query and make sure that your separate template files have different names and filters. This is the solution on the GraphQL side I ended up stealing simply using the folder holding the file and some clever regex to parse what I needed <a href=\\\"https://github.com/gatsbyjs/gatsby/issues/1634\\\">https://github.com/gatsbyjs/gatsby/issues/1634</a>.</p>\\n<p>The filter is: <code>filter: {fileAbsolutePath: {regex: \\\"/blog/.*\\\\\\\\.md$/\\\"}}</code> but be sure to see how the query is structured to understand what is going on. I actually ended up swtiching the filter and sort bits because I had a hunch that the filter ought to go first so we arent sorting the full list and then filtering out items, but I hadn't tested yet. My porfolio is so outnumbered by blog posts, and the absolute number of both so small, that I don't know that it matters anyway.</p>\\n<p>My project thus is organized in part as:</p>\\n<pre><code>..\\n/src\\n  /layouts\\n  /pages\\n    /blog\\n      /YYYY-MM-DD-blog-title\\n        index.md\\n    /portfolio\\n      /YYYY-MM-DD-project-title\\n        index.md\\n  /templates\\n  /utils\\n</code></pre>\\n<p>My <code>blog.js</code> that lives in the <code>\\\\pages</code> root looks like this</p>\\n<h3>src/pages/blog.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Link from \\\"gatsby-link\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Index({ data }) {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-posts\\\">\\n      &#x3C;Helmet title={`Blog posts: rusl.io &#x26; Russell Schmidt`} />\\n      {posts\\n        .filter(post => post.node.frontmatter.title.length > 0)\\n        .map(({ node: post }) => {\\n          return (\\n            &#x3C;div className=\\\"blog-post-preview\\\" key={post.id}>\\n              &#x3C;h1>\\n                &#x3C;Link to={post.frontmatter.path}>{post.frontmatter.title}&#x3C;/Link>\\n              &#x3C;/h1>\\n              &#x3C;h2>{post.frontmatter.date}&#x3C;/h2>\\n              &#x3C;p>{post.excerpt}&#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })}\\n    &#x3C;/div>\\n  );\\n}\\nexport const pageQuery = graphql`\\n  query BlogQuery {\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      filter: {fileAbsolutePath: {regex: \\\"/blog/.*\\\\\\\\.md$/\\\"}}\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMMM DD, YYYY\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n</code></pre>\\n<p>And my <code>portfolio.js</code> that also lives in the <code>\\\\pages</code> root looks like this:</p>\\n<h3>src/pages/portfolio.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Link from \\\"gatsby-link\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Index({ data }) {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-posts\\\">\\n      &#x3C;Helmet title={`Portfolio Projects: rusl.io &#x26; Russell Schmidt`} />\\n      {posts\\n        .filter(post => post.node.frontmatter.title.length > 0)\\n        .map(({ node: post }) => {\\n          return (\\n            &#x3C;div className=\\\"blog-post-preview\\\" key={post.id}>\\n              &#x3C;h1>\\n                &#x3C;Link to={post.frontmatter.path}>{post.frontmatter.title}&#x3C;/Link>\\n              &#x3C;/h1>\\n              &#x3C;h2>{post.frontmatter.date}&#x3C;/h2>\\n              &#x3C;p>{post.excerpt}&#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })}\\n    &#x3C;/div>\\n  );\\n}\\nexport const pageQuery = graphql`\\n  query PortfolioQuery {\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      filter: {fileAbsolutePath: {regex: \\\"/portfolio/.*\\\\\\\\.md$/\\\"}}\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMMM DD, YYYY\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n</code></pre>\\n<p>Then there are the two template files in <code>../src/templates</code>, <code>blog-post.js</code> and <code>portfolio-post.js</code>.</p>\\n<h3>src/templates/blog-post.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Template({\\n  data\\n}) {\\n  const post = data.markdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-post-container\\\">\\n      &#x3C;Helmet title={`rusl.io - ${post.frontmatter.title}`} />\\n      &#x3C;div className=\\\"blog-post\\\">\\n        &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\\n        &#x3C;div\\n          className=\\\"blog-post-content\\\"\\n          dangerouslySetInnerHTML={{ __html: post.html }}\\n        />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  );\\n}\\n\\nexport const pageQuery = graphql`\\n  query BlogPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"MMMM DD, YYYY\\\")\\n        path\\n        title\\n      }\\n    }\\n  }\\n`\\n;\\n</code></pre>\\n<h3>src/templates/portfolio.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Template({\\n  data\\n}) {\\n  const post = data.markdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-post-container\\\">\\n     &#x3C;Helmet title={`rusl.io - ${post.frontmatter.title}`} />\\n      &#x3C;div className=\\\"blog-post\\\">\\n        &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\\n        &#x3C;div\\n          className=\\\"blog-post-content\\\"\\n          dangerouslySetInnerHTML={{ __html: post.html }}\\n        />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  );\\n}\\n\\nexport const pageQuery = graphql`\\n  query PortfolioPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"MMMM DD, YYYY\\\")\\n        path\\n        title\\n      }\\n    }\\n  }\\n`\\n;\\n</code></pre>\\n<h3>Lastly, you will want to add some logic to your <code>gatsby-node.js</code> file.</h3>\\n<pre><code>const path = require('path');\\n\\nexports.createPages = ({ boundActionCreators, graphql }) => {\\n  const { createPage } = boundActionCreators;\\n  const blogPostTemplate = path.resolve(`src/templates/blog-post.js`);\\n  const portfolioPostTemplate = path.resolve(`src/templates/portfolio-post.js`);\\n\\n  return graphql(`{\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      limit: 1000\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          html\\n          id\\n          frontmatter {\\n            date\\n            path\\n            title\\n            type\\n          }\\n        }\\n      }\\n    }\\n  }`).then(result => {\\n    if (result.errors) {\\n      return Promise.reject(result.errors);\\n  } result.data.allMarkdownRemark.edges\\n    .forEach(({ node }) => {\\n      if (node.frontmatter.type === \\\"blog\\\") {\\n        createPage({\\n          path: node.frontmatter.path,\\n          component: blogPostTemplate,\\n          context: {} // additional data can be passed via context\\n        });\\n      } else if (node.frontmatter.type === \\\"portfolio\\\") {\\n        createPage({\\n          path: node.frontmatter.path,\\n          component: portfolioPostTemplate,\\n          context: {} // additional data can be passed via context\\n        });\\n      }\\n    });\\n  });\\n}\\n</code></pre>\",\"frontmatter\":{\"date\":\"February 16, 2018\",\"path\":\"/blog/graphql-filter/\",\"title\":\"Graph QL\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-graphql-filter-98c8956f88255c86b86a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>So the tutorials I used to teach myself a bit about Gatsby have assumed a single source for your blog posts and a structure that has your homepage serve as the \\\"index\\\" in RESTful terms, listing links to all of your blog posts. unfortunately, I want my site to have both portfolio and blog post links to start and I think the separation is important.</p>\\n<p>So it looks like I have to bump up my GraphQL education on the timetable.</p>\\n<p>The solution is to add in a filter to your GraphQL query and make sure that your separate template files have different names and filters. This is the solution on the GraphQL side I ended up stealing simply using the folder holding the file and some clever regex to parse what I needed <a href=\\\"https://github.com/gatsbyjs/gatsby/issues/1634\\\">https://github.com/gatsbyjs/gatsby/issues/1634</a>.</p>\\n<p>The filter is: <code>filter: {fileAbsolutePath: {regex: \\\"/blog/.*\\\\\\\\.md$/\\\"}}</code> but be sure to see how the query is structured to understand what is going on. I actually ended up swtiching the filter and sort bits because I had a hunch that the filter ought to go first so we arent sorting the full list and then filtering out items, but I hadn't tested yet. My porfolio is so outnumbered by blog posts, and the absolute number of both so small, that I don't know that it matters anyway.</p>\\n<p>My project thus is organized in part as:</p>\\n<pre><code>..\\n/src\\n  /layouts\\n  /pages\\n    /blog\\n      /YYYY-MM-DD-blog-title\\n        index.md\\n    /portfolio\\n      /YYYY-MM-DD-project-title\\n        index.md\\n  /templates\\n  /utils\\n</code></pre>\\n<p>My <code>blog.js</code> that lives in the <code>\\\\pages</code> root looks like this</p>\\n<h3>src/pages/blog.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Link from \\\"gatsby-link\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Index({ data }) {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-posts\\\">\\n      &#x3C;Helmet title={`Blog posts: rusl.io &#x26; Russell Schmidt`} />\\n      {posts\\n        .filter(post => post.node.frontmatter.title.length > 0)\\n        .map(({ node: post }) => {\\n          return (\\n            &#x3C;div className=\\\"blog-post-preview\\\" key={post.id}>\\n              &#x3C;h1>\\n                &#x3C;Link to={post.frontmatter.path}>{post.frontmatter.title}&#x3C;/Link>\\n              &#x3C;/h1>\\n              &#x3C;h2>{post.frontmatter.date}&#x3C;/h2>\\n              &#x3C;p>{post.excerpt}&#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })}\\n    &#x3C;/div>\\n  );\\n}\\nexport const pageQuery = graphql`\\n  query BlogQuery {\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      filter: {fileAbsolutePath: {regex: \\\"/blog/.*\\\\\\\\.md$/\\\"}}\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMMM DD, YYYY\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n</code></pre>\\n<p>And my <code>portfolio.js</code> that also lives in the <code>\\\\pages</code> root looks like this:</p>\\n<h3>src/pages/portfolio.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Link from \\\"gatsby-link\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Index({ data }) {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-posts\\\">\\n      &#x3C;Helmet title={`Portfolio Projects: rusl.io &#x26; Russell Schmidt`} />\\n      {posts\\n        .filter(post => post.node.frontmatter.title.length > 0)\\n        .map(({ node: post }) => {\\n          return (\\n            &#x3C;div className=\\\"blog-post-preview\\\" key={post.id}>\\n              &#x3C;h1>\\n                &#x3C;Link to={post.frontmatter.path}>{post.frontmatter.title}&#x3C;/Link>\\n              &#x3C;/h1>\\n              &#x3C;h2>{post.frontmatter.date}&#x3C;/h2>\\n              &#x3C;p>{post.excerpt}&#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })}\\n    &#x3C;/div>\\n  );\\n}\\nexport const pageQuery = graphql`\\n  query PortfolioQuery {\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      filter: {fileAbsolutePath: {regex: \\\"/portfolio/.*\\\\\\\\.md$/\\\"}}\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          id\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMMM DD, YYYY\\\")\\n            path\\n          }\\n        }\\n      }\\n    }\\n  }\\n`;\\n</code></pre>\\n<p>Then there are the two template files in <code>../src/templates</code>, <code>blog-post.js</code> and <code>portfolio-post.js</code>.</p>\\n<h3>src/templates/blog-post.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Template({\\n  data\\n}) {\\n  const post = data.markdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-post-container\\\">\\n      &#x3C;Helmet title={`rusl.io - ${post.frontmatter.title}`} />\\n      &#x3C;div className=\\\"blog-post\\\">\\n        &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\\n        &#x3C;div\\n          className=\\\"blog-post-content\\\"\\n          dangerouslySetInnerHTML={{ __html: post.html }}\\n        />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  );\\n}\\n\\nexport const pageQuery = graphql`\\n  query BlogPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"MMMM DD, YYYY\\\")\\n        path\\n        title\\n      }\\n    }\\n  }\\n`\\n;\\n</code></pre>\\n<h3>src/templates/portfolio.js</h3>\\n<pre><code>import React from \\\"react\\\";\\nimport Helmet from \\\"react-helmet\\\";\\n\\nexport default function Template({\\n  data\\n}) {\\n  const post = data.markdownRemark;\\n  return (\\n    &#x3C;div className=\\\"blog-post-container\\\">\\n     &#x3C;Helmet title={`rusl.io - ${post.frontmatter.title}`} />\\n      &#x3C;div className=\\\"blog-post\\\">\\n        &#x3C;h1>{post.frontmatter.title}&#x3C;/h1>\\n        &#x3C;div\\n          className=\\\"blog-post-content\\\"\\n          dangerouslySetInnerHTML={{ __html: post.html }}\\n        />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  );\\n}\\n\\nexport const pageQuery = graphql`\\n  query PortfolioPostByPath($path: String!) {\\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\\n      html\\n      frontmatter {\\n        date(formatString: \\\"MMMM DD, YYYY\\\")\\n        path\\n        title\\n      }\\n    }\\n  }\\n`\\n;\\n</code></pre>\\n<h3>Lastly, you will want to add some logic to your <code>gatsby-node.js</code> file.</h3>\\n<pre><code>const path = require('path');\\n\\nexports.createPages = ({ boundActionCreators, graphql }) => {\\n  const { createPage } = boundActionCreators;\\n  const blogPostTemplate = path.resolve(`src/templates/blog-post.js`);\\n  const portfolioPostTemplate = path.resolve(`src/templates/portfolio-post.js`);\\n\\n  return graphql(`{\\n    allMarkdownRemark(\\n      sort: { order: DESC, fields: [frontmatter___date] }\\n      limit: 1000\\n    ) {\\n      edges {\\n        node {\\n          excerpt(pruneLength: 250)\\n          html\\n          id\\n          frontmatter {\\n            date\\n            path\\n            title\\n            type\\n          }\\n        }\\n      }\\n    }\\n  }`).then(result => {\\n    if (result.errors) {\\n      return Promise.reject(result.errors);\\n  } result.data.allMarkdownRemark.edges\\n    .forEach(({ node }) => {\\n      if (node.frontmatter.type === \\\"blog\\\") {\\n        createPage({\\n          path: node.frontmatter.path,\\n          component: blogPostTemplate,\\n          context: {} // additional data can be passed via context\\n        });\\n      } else if (node.frontmatter.type === \\\"portfolio\\\") {\\n        createPage({\\n          path: node.frontmatter.path,\\n          component: portfolioPostTemplate,\\n          context: {} // additional data can be passed via context\\n        });\\n      }\\n    });\\n  });\\n}\\n</code></pre>\",\"frontmatter\":{\"date\":\"February 16, 2018\",\"path\":\"/blog/graphql-filter/\",\"title\":\"Graph QL\",\"type\":\"blog\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-graphql-filter.json\n// module id = 568\n// module chunks = 165526250525667"],"sourceRoot":""}